# Custom U-Boot base environment for Nerves

# This environment is a majorly trimmed down version of the default
# one that ships with the Beaglebone.
#
# Why?
#   1. We want to store settings in the U-boot environment so that they're
#      accessible both to Elixir and U-boot.
#   2. This makes us add an environment block.
#   3. Unfortunately, if we point U-Boot to this block, it replaces its
#      default environment settings which contain all of the logic to
#      boot the boards. Therefore we have to copy/paste the relevant
#      parts here.
#   4. We can support more complicated firmware validation methods by
#      deferring validation of new software to the application. The
#      default below is to automatically validate new software.
#
# See U-Boot/include/configs/ti_armv7_common.h and
# U-Boot/include/configs/am335x_evm.h for most of what's below.
#
# IMPORTANT:
# Calling saveenv saves everything. Some of the variables it saves override
# automatically detected defaults and you can't know whether the variable was
# supplied automatically or via the saved environment. There is no way to
# selectively save environment variables. Here are problematic variables:
#
# * ethaddr
# * eth1addr
# * board_name
# * board_rev
# * board_serial
#
# If you move MicroSD cards around between boards, you currently need to clear
# those variables out so that they're detected again. The most visible issue is
# that Ethernet MAC addresses will travel with MicroSD cards. See
# https://github.com/nerves-project/nerves_system_bbb/issues/151.


#
# Nerves variables
#

nerves_fw_active=a

# nerves_fw_autovalidate controls whether updates are considered valid once
# applied. If set to 0, the user needs to set nerves_fw_validated to 1 in their
# application. If they don't set it before a reboot, then the previous software
# is run. If 1, then no further action needs to be taken.
nerves_fw_autovalidate=1

# nerves_fw_validated is 1 if the current boot selection is accepted It is set
# to 1 here, since this environment is written in the factory, so it is
# implicitly valid.
nerves_fw_validated=1

# nerves_fw_booted is 0 for the first boot and 1 for all reboots after that.
# NOTE: Keep this '0' so that all new boards run a 'saveenv' to exercise the
#       code that writes back to the eMMC early on.
nerves_fw_booted=0

# The nerves initialization logic
#
# The nerves_init code is run at boot (see the last line of the file). It
# checks whether this is a first boot or not. If it's not the first boot, then
# the firmware better be validated or it reverts to running the firmware on
# the opposite partition.
nerves_revert=\
    if test ${nerves_fw_active} = "a"; then\
        echo "Reverting to partition B";\
        setenv nerves_fw_active "b";\
    else\
        echo "Reverting to partition A";\
        setenv nerves_fw_active "a";\
    fi

nerves_init=\
    if test ${nerves_fw_booted} = 1; then\
        if test ${nerves_fw_validated} = 0; then\
            run nerves_revert;\
            setenv nerves_fw_validated 1;\
            saveenv;\
        fi;\
    else\
        setenv nerves_fw_booted 1;\
        if test ${nerves_fw_autovalidate} = 1; then\
            setenv nerves_fw_validated 1;\
        fi;\
        saveenv;\
    fi;\
    setenv bootfile Image;\
    if test ${nerves_fw_active} = "a"; then\
        setenv uenv_root /dev/vda2;\
    else\
        setenv uenv_root /dev/vda3;\
    fi

#
# Beagleboard variables with Nerves updates
#
# Yes, this is really hard to maintain. The defaults can either be gleaned
# from the Beagleboard patches, or by booting into U-Boot, resetting the
# environment with "env default -f -a", and then running printenv. The
# "findfdt" is probably the variable to update.
#

arch=arm
baudrate=115200
board=qemu-arm
board_name=qemu-arm
boot_targets=qfw usb scsi virtio nvme dhcp
bootdelay=2
cpu=armv8
fdt_addr=0x40000000
fdt_high=0xffffffff
initrd_high=0xffffffff
kernel_addr_r=0x40400000
preboot=usb start
pxefile_addr_r=0x40300000
ramdisk_addr_r=0x44000000
scriptaddr=0x40200000
stderr=serial,vidconsole
stdin=serial,usbkbd
stdout=serial,vidconsole
usb_ignorelist=0x1050:*,
vendor=emulation

console=ttyAMA0

#
# Default Linux commandline:
#
cmdline=

# Defaults
#console=ttyS0,115200n8
#bootdir=
#fdtdir=/boot
#fdtfile=undefined
#devtype=mmc
# squashfs support is slow, so always load the kernel from FAT (FIXME)
#kernel_bootpart=0:1

# Allocate memory for calls to dma_alloc_coherent. USB WiFi adapters
# use this.
#optargs=coherent_pool=1M

# Memory offset for loading files

#loadaddr=0x82000000
#kernel_addr_r=0x82000000
#fdtaddr=0x88000000
#fdt_addr_r=0x88000000
#rdaddr=0x88080000
#ramdisk_addr_r=0x88080000
#scriptaddr=0x80000000
#bootm_size=0x10000000

# Load kernel image
loadaddr=0x40200000
# Load device tree binary
loadaddr_dtb=0x49000000


# Helper functions
args_uenv_root=setenv bootargs console=${console} root=${uenv_root} ${cmdline}

loadimage=fatload virtio 0:1 ${loadaddr} ${bootfile}
loaddtb=echo loading qemu.dtb; fatload virtio 0:1 ${loadaddr_dtb} qemu.dtb

uname_boot=echo board_name=[$board_name] ...;\
	run loadimage;\
	run loaddtb;\
	run args_uenv_root;\
	echo debug: [${bootargs}] ... ;\
	echo debug: [bootz ${loadaddr} - ${loadaddr_dtb}] ... ;\
	booti ${loadaddr} - ${loadaddr_dtb}

# Boot
bootcmd=run nerves_init uname_boot
